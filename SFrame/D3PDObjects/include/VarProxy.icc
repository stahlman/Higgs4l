// Dear emacs, this is -*- c++ -*-
// $Id: VarProxy.icc 19045 2012-10-17 09:05:48Z sheim $
#ifndef D3PDREADER_VARPROXY_ICC
#define D3PDREADER_VARPROXY_ICC

namespace D3PDReader {

   template< typename Type >
   VarProxy< Type >::VarProxy( const VarHandle< std::vector< Type >* >& handle, size_t i,
                               ::TObject* parent )
      : fHandle( const_cast< VarHandle< std::vector< Type >* >* >( &handle ) ),
        fIndex( i ), fParent( parent ), fDummy() {

   }

   template< typename Type >
   VarProxy< Type >::VarProxy( const VarProxy< Type >& parent )
      : fHandle( parent.fHandle ), fIndex( parent.fIndex ), fParent( parent.fParent ),
        fDummy() {

   }

   template< typename Type >
   VarProxy< Type >& VarProxy< Type >::operator=( const VarProxy< Type >& parent ) {

      fHandle = parent.fHandle;
      fIndex  = parent.fIndex;
      fParent = parent.fParent;

      return *this;
   }

   template< typename Type >
   ::Bool_t VarProxy< Type >::IsAvailable() const {

      return fHandle->IsAvailable();
   }

   template< typename Type >
   typename VarProxy< Type >::result_type VarProxy< Type >::operator()() {

      if( fHandle->IsAvailable() ) {
         return ( ( *( *fHandle )() ) )[ fIndex ];
      } else {
         fParent->Warning( TString( fHandle->GetName() ) + "_proxy",
                           "Variable not available on input. Returning 0, "+TString( fHandle->GetName() ) );
         return fDummy;
      }
   }

   template< typename Type >
   typename VarProxy< Type >::const_result_type VarProxy< Type >::operator()() const {

      if( fHandle->IsAvailable() ) {
         return ( ( *( *fHandle )() ) )[ fIndex ];
      } else {
         fParent->Warning( TString( fHandle->GetName() ) + "_proxy",
                           "Variable not available on input. Returning 0, "+TString( fHandle->GetName() ) );
         return fDummy;
      }
   }

} // namespace D3PDReader

#endif // D3PDREADER_VARPROXY_ICC
