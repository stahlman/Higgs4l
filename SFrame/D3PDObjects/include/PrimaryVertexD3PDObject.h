// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_PrimaryVertexD3PDObject_H
#define D3PDREADER_PrimaryVertexD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "D3PDObjectBase.h"
#include "D3PDReadStats.h"
#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class PrimaryVertexD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-01
    *  OS   = Linux / 2.6.18-308.8.2.el5
    *  user = stahlman
    *  time = Fri Jun 29 14:28:44 2012
    */
   class PrimaryVertexD3PDObjectElement : public TObject {

      friend class PrimaryVertexD3PDObject;

   protected:
      /// Constructor only visible to PrimaryVertexD3PDObject
      PrimaryVertexD3PDObjectElement( size_t index, const PrimaryVertexD3PDObject& parent );

   public:
      /// Copy constructor
      PrimaryVertexD3PDObjectElement( const PrimaryVertexD3PDObjectElement& parent );

      /// Parent object of this proxy object
      const PrimaryVertexD3PDObject* GetParent() const;
      /// Index of the object inside its container
      size_t GetIndex() const;

      VarProxy< float > E;
      VarProxy< float > chi2;
      VarProxy< float > cov_x;
      VarProxy< float > cov_xy;
      VarProxy< float > cov_xz;
      VarProxy< float > cov_y;
      VarProxy< float > cov_yz;
      VarProxy< float > cov_z;
      VarProxy< float > m;
      VarProxy< int > nTracks;
      VarProxy< int > ndof;
      VarProxy< float > px;
      VarProxy< float > py;
      VarProxy< float > pz;
      VarProxy< float > sumPt;
      /// Index in trk
      VarProxy< std::vector<int,std::allocator<int> > > trk_index;
      /// Number of ntuple rows.
      VarProxy< int > trk_n;
      VarProxy< std::vector<float,std::allocator<float> > > trk_weight;
      VarProxy< int > type;
      VarProxy< float > x;
      VarProxy< float > y;
      VarProxy< float > z;

   private:
      /// Reference to the parent of this object
      const PrimaryVertexD3PDObject* fParent;
      /// The index of this object inside the parent container
      size_t fIndex;

      ClassDef( PrimaryVertexD3PDObjectElement, 0 )

   }; // class PrimaryVertexD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-01
    *  OS   = Linux / 2.6.18-308.8.2.el5
    *  user = stahlman
    *  time = Fri Jun 29 14:28:44 2012
    */
   class PrimaryVertexD3PDObject : public D3PDObjectBase {

   public:
      /// Constructor used when reading from a TTree
      PrimaryVertexD3PDObject( const ::Long64_t& master, const char* prefix = "vxp_" );
      /// Constructor when the object is only used for writing data out
      PrimaryVertexD3PDObject( const char* prefix = "vxp_" );
      /// Destructor
      ~PrimaryVertexD3PDObject();

      /// Get the currently configured prefix value
      virtual const char* GetPrefix() const;
      /// Set the prefix for the variables
      virtual void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      virtual void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      virtual void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      virtual void SetActive( ::Bool_t active = kTRUE,
                              const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      virtual void ReadAllActive();

      /// Get the D3PD reading statistics
      virtual D3PDReadStats GetStatistics() const;

      /// Set the contents of the object according to another object
      PrimaryVertexD3PDObject& Set( const PrimaryVertexD3PDObject& parent );

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      PrimaryVertexD3PDObject& Add( const PrimaryVertexD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      PrimaryVertexD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const PrimaryVertexD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      PrimaryVertexD3PDObject& operator+=( const PrimaryVertexD3PDObjectElement& el );

      VarHandle< std::vector<float,std::allocator<float> >* > E;
      VarHandle< std::vector<float,std::allocator<float> >* > chi2;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_x;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_xy;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_xz;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_y;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_yz;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_z;
      VarHandle< std::vector<float,std::allocator<float> >* > m;
      /// Number of ntuple rows.
      VarHandle< int > n;
      VarHandle< std::vector<int,std::allocator<int> >* > nTracks;
      VarHandle< std::vector<int,std::allocator<int> >* > ndof;
      VarHandle< std::vector<float,std::allocator<float> >* > px;
      VarHandle< std::vector<float,std::allocator<float> >* > py;
      VarHandle< std::vector<float,std::allocator<float> >* > pz;
      VarHandle< std::vector<float,std::allocator<float> >* > sumPt;
      /// Index in trk
      VarHandle< std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >* > trk_index;
      /// Number of ntuple rows.
      VarHandle< std::vector<int,std::allocator<int> >* > trk_n;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > trk_weight;
      VarHandle< std::vector<int,std::allocator<int> >* > type;
      VarHandle< std::vector<float,std::allocator<float> >* > x;
      VarHandle< std::vector<float,std::allocator<float> >* > y;
      VarHandle< std::vector<float,std::allocator<float> >* > z;

   private:
      mutable std::vector< PrimaryVertexD3PDObjectElement* > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( PrimaryVertexD3PDObject, 0 )

   }; // class PrimaryVertexD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_PrimaryVertexD3PDObject_H
