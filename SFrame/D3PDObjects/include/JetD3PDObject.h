// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_JetD3PDObject_H
#define D3PDREADER_JetD3PDObject_H

#include <map>
#include <vector>
using std::vector;
#include <string>
using std::string;

#include <TObject.h>
#include <TString.h>

#include "D3PDObjectBase.h"
#include "D3PDReadStats.h"
#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class JetD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = at3i00.hep.upenn.edu
    *  OS   = Linux / 2.6.18-348.4.1.el5
    *  user = stahlman
    *  time = Tue Sep 10 18:30:38 2013
    */
   class JetD3PDObjectElement : public TObject {

      friend class JetD3PDObject;

   protected:
      /// Constructor only visible to JetD3PDObject
      JetD3PDObjectElement( size_t index, const JetD3PDObject& parent );

   public:
      /// Copy constructor
      JetD3PDObjectElement( const JetD3PDObjectElement& parent );

      /// Parent object of this proxy object
      const JetD3PDObject* GetParent() const;
      /// Index of the object inside its container
      size_t GetIndex() const;

      VarProxy< float > ActiveArea;
      VarProxy< float > ActiveAreaE;
      VarProxy< float > ActiveAreaPx;
      VarProxy< float > ActiveAreaPy;
      VarProxy< float > ActiveAreaPz;
      VarProxy< float > AverageLArQF;
      VarProxy< float > BAD_CELLS_CORR_E;
      VarProxy< float > BCH_CORR_CELL;
      VarProxy< float > BCH_CORR_DOTX;
      VarProxy< float > BCH_CORR_JET;
      VarProxy< float > BCH_CORR_JET_FORCELL;
      VarProxy< float > E;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > EF_dr;
      VarProxy< int > EF_matched;
      VarProxy< float > EMJES;
      VarProxy< float > EMJES_EtaCorr;
      VarProxy< float > EMJESnooffset;
      VarProxy< float > ENG_BAD_CELLS;
      VarProxy< float > EtaOrigin;
      VarProxy< float > GSCFactorF;
      VarProxy< float > HECQuality;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > L1_dr;
      VarProxy< int > L1_matched;
      /// DeltaR between the offline and trigger objects.
      VarProxy< float > L2_dr;
      VarProxy< int > L2_matched;
      VarProxy< float > LArQuality;
      VarProxy< float > LCJES;
      VarProxy< float > LCJES_EtaCorr;
      VarProxy< float > MOrigin;
      VarProxy< float > N_BAD_CELLS;
      VarProxy< float > N_BAD_CELLS_CORR;
      VarProxy< int > Nconst;
      VarProxy< float > NegativeE;
      VarProxy< float > NumTowers;
      VarProxy< float > Offset;
      VarProxy< float > OriginIndex;
      VarProxy< float > PhiOrigin;
      VarProxy< int > SamplingMax;
      VarProxy< float > Timing;
      VarProxy< float > TruthMF;
      VarProxy< float > TruthMFindex;
      VarProxy< float > WIDTH;
      VarProxy< float > WidthFraction;
      VarProxy< float > constscale_E;
      VarProxy< float > constscale_eta;
      VarProxy< float > constscale_m;
      VarProxy< float > constscale_phi;
      VarProxy< float > constscale_pt;
      VarProxy< float > e_EMB1;
      VarProxy< float > e_EMB2;
      VarProxy< float > e_EMB3;
      VarProxy< float > e_EME1;
      VarProxy< float > e_EME2;
      VarProxy< float > e_EME3;
      VarProxy< float > e_FCAL0;
      VarProxy< float > e_FCAL1;
      VarProxy< float > e_FCAL2;
      VarProxy< float > e_HEC0;
      VarProxy< float > e_HEC1;
      VarProxy< float > e_HEC2;
      VarProxy< float > e_HEC3;
      VarProxy< float > e_PreSamplerB;
      VarProxy< float > e_PreSamplerE;
      VarProxy< float > e_TileBar0;
      VarProxy< float > e_TileBar1;
      VarProxy< float > e_TileBar2;
      VarProxy< float > e_TileExt0;
      VarProxy< float > e_TileExt1;
      VarProxy< float > e_TileExt2;
      VarProxy< float > e_TileGap1;
      VarProxy< float > e_TileGap2;
      VarProxy< float > e_TileGap3;
      VarProxy< std::vector<float,std::allocator<float> > > econst_default;
      VarProxy< float > el_dr;
      VarProxy< int > el_matched;
      VarProxy< float > emfrac;
      VarProxy< float > emscale_E;
      VarProxy< float > emscale_eta;
      VarProxy< float > emscale_m;
      VarProxy< float > emscale_phi;
      VarProxy< float > emscale_pt;
      VarProxy< float > eta;
      VarProxy< std::vector<float,std::allocator<float> > > etaconst_default;
      /// Names of the properties in JetFitterGenericTagInfo
      VarProxy< std::vector<std::string,std::allocator<std::string> > > flavor_component_jfitc_doublePropName;
      /// Values of the properties in JetFitterGenericTagInfo
      VarProxy< std::vector<double,std::allocator<double> > > flavor_component_jfitc_doublePropValue;
      /// Names of the properties in JetFitterGenericTagInfo
      VarProxy< std::vector<std::string,std::allocator<std::string> > > flavor_component_jfitc_intPropName;
      /// Values of the properties in JetFitterGenericTagInfo
      VarProxy< std::vector<int,std::allocator<int> > > flavor_component_jfitc_intPropValue;
      VarProxy< int > flavor_component_jfitc_isValid;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitc_pb;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitc_pc;
      /// UNDOCUMENTED
      VarProxy< float > flavor_component_jfitc_pu;
      VarProxy< int > flavor_truth_BHadronpdg;
      VarProxy< float > flavor_truth_dRminToB;
      VarProxy< float > flavor_truth_dRminToC;
      VarProxy< float > flavor_truth_dRminToT;
      VarProxy< int > flavor_truth_label;
      VarProxy< float > flavor_truth_vx_x;
      VarProxy< float > flavor_truth_vx_y;
      VarProxy< float > flavor_truth_vx_z;
      VarProxy< float > flavor_weight_Comb;
      VarProxy< float > flavor_weight_GbbNN;
      VarProxy< float > flavor_weight_IP2D;
      VarProxy< float > flavor_weight_IP3D;
      VarProxy< float > flavor_weight_JetFitterCOMBNN;
      VarProxy< float > flavor_weight_JetFitterCharm;
      VarProxy< float > flavor_weight_JetFitterTagNN;
      VarProxy< float > flavor_weight_MV1;
      VarProxy< float > flavor_weight_MV2;
      VarProxy< float > flavor_weight_MV3_bVSc;
      VarProxy< float > flavor_weight_MV3_bVSu;
      VarProxy< float > flavor_weight_MV3_cVSu;
      VarProxy< float > flavor_weight_SV0;
      VarProxy< float > flavor_weight_SV1;
      VarProxy< float > flavor_weight_SV2;
      VarProxy< float > flavor_weight_SecondSoftMuonTagChi2;
      VarProxy< float > flavor_weight_SoftMuonTagChi2;
      VarProxy< float > fracSamplingMax;
      VarProxy< float > hecf;
      VarProxy< int > isBadLoose;
      VarProxy< int > isBadLooseMinus;
      VarProxy< int > isBadMedium;
      VarProxy< int > isBadTight;
      VarProxy< int > isUgly;
      VarProxy< float > jvtx_x;
      VarProxy< float > jvtx_y;
      VarProxy< float > jvtx_z;
      VarProxy< float > jvtxf;
      VarProxy< std::vector<float,std::allocator<float> > > jvtxfFull;
      VarProxy< float > m;
      VarProxy< float > mu_dr;
      VarProxy< int > mu_matched;
      VarProxy< float > n90;
      VarProxy< float > nTrk;
      VarProxy< float > nTrk_allpv_1GeV;
      VarProxy< float > nTrk_pv0_1GeV;
      VarProxy< float > nTrk_pv0_500MeV;
      VarProxy< float > ootFracCells10;
      VarProxy< float > ootFracCells5;
      VarProxy< float > ootFracClusters10;
      VarProxy< float > ootFracClusters5;
      VarProxy< float > phi;
      VarProxy< std::vector<float,std::allocator<float> > > phiconst_default;
      VarProxy< float > pt;
      VarProxy< std::vector<float,std::allocator<float> > > ptconst_default;
      VarProxy< float > sumPtTrk;
      VarProxy< float > sumPtTrk_allpv_1GeV;
      VarProxy< float > sumPtTrk_pv0_1GeV;
      VarProxy< float > sumPtTrk_pv0_500MeV;
      VarProxy< float > tgap3f;
      VarProxy< float > trackWIDTH_allpv_1GeV;
      VarProxy< float > trackWIDTH_pv0_1GeV;
      VarProxy< std::vector<float,std::allocator<float> > > weightconst_default;

   private:
      /// Reference to the parent of this object
      const JetD3PDObject* fParent;
      /// The index of this object inside the parent container
      size_t fIndex;

      ClassDef( JetD3PDObjectElement, 0 )

   }; // class JetD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = at3i00.hep.upenn.edu
    *  OS   = Linux / 2.6.18-348.4.1.el5
    *  user = stahlman
    *  time = Tue Sep 10 18:30:38 2013
    */
   class JetD3PDObject : public D3PDObjectBase {

   public:
      /// Constructor used when reading from a TTree
      JetD3PDObject( const ::Long64_t& master, const char* prefix = "jet_antikt4truth_" );
      /// Constructor when the object is only used for writing data out
      JetD3PDObject( const char* prefix = "jet_antikt4truth_" );
      /// Destructor
      ~JetD3PDObject();

      /// Get the currently configured prefix value
      virtual const char* GetPrefix() const;
      /// Set the prefix for the variables
      virtual void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      virtual void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      virtual void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      virtual void SetActive( ::Bool_t active = kTRUE,
                              const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      virtual void ReadAllActive();

      /// Get the D3PD reading statistics
      virtual D3PDReadStats GetStatistics() const;

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      JetD3PDObject& Add( const JetD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      JetD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const JetD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      JetD3PDObject& operator+=( const JetD3PDObjectElement& el );

      VarHandle< std::vector<float,std::allocator<float> >* > ActiveArea;
      VarHandle< std::vector<float,std::allocator<float> >* > ActiveAreaE;
      VarHandle< std::vector<float,std::allocator<float> >* > ActiveAreaPx;
      VarHandle< std::vector<float,std::allocator<float> >* > ActiveAreaPy;
      VarHandle< std::vector<float,std::allocator<float> >* > ActiveAreaPz;
      VarHandle< std::vector<float,std::allocator<float> >* > AverageLArQF;
      VarHandle< std::vector<float,std::allocator<float> >* > BAD_CELLS_CORR_E;
      VarHandle< std::vector<float,std::allocator<float> >* > BCH_CORR_CELL;
      VarHandle< std::vector<float,std::allocator<float> >* > BCH_CORR_DOTX;
      VarHandle< std::vector<float,std::allocator<float> >* > BCH_CORR_JET;
      VarHandle< std::vector<float,std::allocator<float> >* > BCH_CORR_JET_FORCELL;
      VarHandle< std::vector<float,std::allocator<float> >* > E;
      /// DeltaR between the offline and trigger objects.
      VarHandle< std::vector<float,std::allocator<float> >* > EF_dr;
      VarHandle< std::vector<int,std::allocator<int> >* > EF_matched;
      VarHandle< std::vector<float,std::allocator<float> >* > EMJES;
      VarHandle< std::vector<float,std::allocator<float> >* > EMJES_EtaCorr;
      VarHandle< std::vector<float,std::allocator<float> >* > EMJESnooffset;
      VarHandle< std::vector<float,std::allocator<float> >* > ENG_BAD_CELLS;
      VarHandle< std::vector<float,std::allocator<float> >* > EtaOrigin;
      VarHandle< std::vector<float,std::allocator<float> >* > GSCFactorF;
      VarHandle< std::vector<float,std::allocator<float> >* > HECQuality;
      /// DeltaR between the offline and trigger objects.
      VarHandle< std::vector<float,std::allocator<float> >* > L1_dr;
      VarHandle< std::vector<int,std::allocator<int> >* > L1_matched;
      /// DeltaR between the offline and trigger objects.
      VarHandle< std::vector<float,std::allocator<float> >* > L2_dr;
      VarHandle< std::vector<int,std::allocator<int> >* > L2_matched;
      VarHandle< std::vector<float,std::allocator<float> >* > LArQuality;
      VarHandle< std::vector<float,std::allocator<float> >* > LCJES;
      VarHandle< std::vector<float,std::allocator<float> >* > LCJES_EtaCorr;
      VarHandle< std::vector<float,std::allocator<float> >* > MOrigin;
      VarHandle< std::vector<float,std::allocator<float> >* > N_BAD_CELLS;
      VarHandle< std::vector<float,std::allocator<float> >* > N_BAD_CELLS_CORR;
      VarHandle< std::vector<int,std::allocator<int> >* > Nconst;
      VarHandle< std::vector<float,std::allocator<float> >* > NegativeE;
      VarHandle< std::vector<float,std::allocator<float> >* > NumTowers;
      VarHandle< std::vector<float,std::allocator<float> >* > Offset;
      VarHandle< std::vector<float,std::allocator<float> >* > OriginIndex;
      VarHandle< std::vector<float,std::allocator<float> >* > PhiOrigin;
      VarHandle< std::vector<int,std::allocator<int> >* > SamplingMax;
      VarHandle< std::vector<float,std::allocator<float> >* > Timing;
      VarHandle< std::vector<float,std::allocator<float> >* > TruthMF;
      VarHandle< std::vector<float,std::allocator<float> >* > TruthMFindex;
      VarHandle< std::vector<float,std::allocator<float> >* > WIDTH;
      VarHandle< std::vector<float,std::allocator<float> >* > WidthFraction;
      VarHandle< std::vector<float,std::allocator<float> >* > constscale_E;
      VarHandle< std::vector<float,std::allocator<float> >* > constscale_eta;
      VarHandle< std::vector<float,std::allocator<float> >* > constscale_m;
      VarHandle< std::vector<float,std::allocator<float> >* > constscale_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > constscale_pt;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EMB1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EMB2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EMB3;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EME1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EME2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_EME3;
      VarHandle< std::vector<float,std::allocator<float> >* > e_FCAL0;
      VarHandle< std::vector<float,std::allocator<float> >* > e_FCAL1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_FCAL2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_HEC0;
      VarHandle< std::vector<float,std::allocator<float> >* > e_HEC1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_HEC2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_HEC3;
      VarHandle< std::vector<float,std::allocator<float> >* > e_PreSamplerB;
      VarHandle< std::vector<float,std::allocator<float> >* > e_PreSamplerE;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileBar0;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileBar1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileBar2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileExt0;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileExt1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileExt2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileGap1;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileGap2;
      VarHandle< std::vector<float,std::allocator<float> >* > e_TileGap3;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > econst_default;
      VarHandle< std::vector<float,std::allocator<float> >* > el_dr;
      VarHandle< std::vector<int,std::allocator<int> >* > el_matched;
      VarHandle< std::vector<float,std::allocator<float> >* > emfrac;
      VarHandle< std::vector<float,std::allocator<float> >* > emscale_E;
      VarHandle< std::vector<float,std::allocator<float> >* > emscale_eta;
      VarHandle< std::vector<float,std::allocator<float> >* > emscale_m;
      VarHandle< std::vector<float,std::allocator<float> >* > emscale_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > emscale_pt;
      VarHandle< std::vector<float,std::allocator<float> >* > eta;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > etaconst_default;
      /// Names of the properties in JetFitterGenericTagInfo
      VarHandle< std::vector<std::vector<std::string,std::allocator<std::string> >,std::allocator<std::vector<std::string,std::allocator<std::string> > > >* > flavor_component_jfitc_doublePropName;
      /// Values of the properties in JetFitterGenericTagInfo
      VarHandle< std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >* > flavor_component_jfitc_doublePropValue;
      /// Names of the properties in JetFitterGenericTagInfo
      VarHandle< std::vector<std::vector<std::string,std::allocator<std::string> >,std::allocator<std::vector<std::string,std::allocator<std::string> > > >* > flavor_component_jfitc_intPropName;
      /// Values of the properties in JetFitterGenericTagInfo
      VarHandle< std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >* > flavor_component_jfitc_intPropValue;
      VarHandle< std::vector<int,std::allocator<int> >* > flavor_component_jfitc_isValid;
      /// UNDOCUMENTED
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_component_jfitc_pb;
      /// UNDOCUMENTED
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_component_jfitc_pc;
      /// UNDOCUMENTED
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_component_jfitc_pu;
      VarHandle< std::vector<int,std::allocator<int> >* > flavor_truth_BHadronpdg;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_dRminToB;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_dRminToC;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_dRminToT;
      VarHandle< std::vector<int,std::allocator<int> >* > flavor_truth_label;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_vx_x;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_vx_y;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_truth_vx_z;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_Comb;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_GbbNN;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_IP2D;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_IP3D;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_JetFitterCOMBNN;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_JetFitterCharm;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_JetFitterTagNN;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_MV1;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_MV2;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_MV3_bVSc;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_MV3_bVSu;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_MV3_cVSu;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_SV0;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_SV1;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_SV2;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_SecondSoftMuonTagChi2;
      VarHandle< std::vector<float,std::allocator<float> >* > flavor_weight_SoftMuonTagChi2;
      VarHandle< std::vector<float,std::allocator<float> >* > fracSamplingMax;
      VarHandle< std::vector<float,std::allocator<float> >* > hecf;
      VarHandle< std::vector<int,std::allocator<int> >* > isBadLoose;
      VarHandle< std::vector<int,std::allocator<int> >* > isBadLooseMinus;
      VarHandle< std::vector<int,std::allocator<int> >* > isBadMedium;
      VarHandle< std::vector<int,std::allocator<int> >* > isBadTight;
      VarHandle< std::vector<int,std::allocator<int> >* > isUgly;
      VarHandle< std::vector<float,std::allocator<float> >* > jvtx_x;
      VarHandle< std::vector<float,std::allocator<float> >* > jvtx_y;
      VarHandle< std::vector<float,std::allocator<float> >* > jvtx_z;
      VarHandle< std::vector<float,std::allocator<float> >* > jvtxf;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > jvtxfFull;
      VarHandle< std::vector<float,std::allocator<float> >* > m;
      VarHandle< std::vector<float,std::allocator<float> >* > mu_dr;
      VarHandle< std::vector<int,std::allocator<int> >* > mu_matched;
      /// Number of ntuple rows.
      VarHandle< int > n;
      VarHandle< std::vector<float,std::allocator<float> >* > n90;
      VarHandle< std::vector<float,std::allocator<float> >* > nTrk;
      VarHandle< std::vector<float,std::allocator<float> >* > nTrk_allpv_1GeV;
      VarHandle< std::vector<float,std::allocator<float> >* > nTrk_pv0_1GeV;
      VarHandle< std::vector<float,std::allocator<float> >* > nTrk_pv0_500MeV;
      VarHandle< std::vector<float,std::allocator<float> >* > ootFracCells10;
      VarHandle< std::vector<float,std::allocator<float> >* > ootFracCells5;
      VarHandle< std::vector<float,std::allocator<float> >* > ootFracClusters10;
      VarHandle< std::vector<float,std::allocator<float> >* > ootFracClusters5;
      VarHandle< std::vector<float,std::allocator<float> >* > phi;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > phiconst_default;
      VarHandle< std::vector<float,std::allocator<float> >* > pt;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > ptconst_default;
      VarHandle< std::vector<float,std::allocator<float> >* > sumPtTrk;
      VarHandle< std::vector<float,std::allocator<float> >* > sumPtTrk_allpv_1GeV;
      VarHandle< std::vector<float,std::allocator<float> >* > sumPtTrk_pv0_1GeV;
      VarHandle< std::vector<float,std::allocator<float> >* > sumPtTrk_pv0_500MeV;
      VarHandle< std::vector<float,std::allocator<float> >* > tgap3f;
      VarHandle< std::vector<float,std::allocator<float> >* > trackWIDTH_allpv_1GeV;
      VarHandle< std::vector<float,std::allocator<float> >* > trackWIDTH_pv0_1GeV;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > weightconst_default;

   private:
      mutable std::vector< JetD3PDObjectElement* > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( JetD3PDObject, 0 )

   }; // class JetD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_JetD3PDObject_H
