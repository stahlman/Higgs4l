// Dear emacs, this is -*- c++ -*-
// $Id: VarHandle.icc 18396 2012-09-24 18:24:38Z sheim $
#ifndef D3PDREADER_VARHANDLE_ICC
#define D3PDREADER_VARHANDLE_ICC

// System include(s):
#include <string.h>
#include <cxxabi.h>
#include <cstdlib>

// ROOT include(s):
#include <TObject.h>
#include <TClass.h>
#include <TTree.h>
#include <TBranch.h>

namespace D3PDReader {

   template< typename Type >
   VarHandle< Type >::VarHandle( ::TObject* parent, const char* name,
                                 const ::Long64_t* master )
      : VarHandleBase( parent, name, master ),
        fVariable() {

      SetType( RootCppType( typeid( Type ).name() ) );
   }

   template< typename Type >
   VarHandle< Type >::~VarHandle() {

   }

   template< typename Type >
   void VarHandle< Type >::ReadFrom( ::TTree* tree ) {

      fInTree = tree;
      fFromInput = kTRUE;
      fVariable = 0;
      fInBranch = 0;
      fAvailable = UNKNOWN;

      return;
   }

   template< typename Type >
   ::TBranch* VarHandle< Type >::WriteTo( ::TTree* tree ) {

      if( ! IsActive() ) return 0;

      ::TBranch* branch = tree->GetBranch( GetName() );
      if( branch ) return branch;

      branch = tree->Branch( GetName(), &fVariable,
                             TString::Format( "%s/%s", GetName(),
                                              RootType( typeid( Type ).name() ) ) );
      if( ! branch ) {
         fParent->Error( "WriteTo",
                         "Couldn't add variable %s to tree %s",
                         GetName(), tree->GetName() );
      }
      return branch;
   }

   template< typename Type >
   typename VarHandle< Type >::result_type VarHandle< Type >::operator()() {

      if( ! fFromInput ) return fVariable;

      if( ! fInBranch ) {
         if( ! ConnectVariable( &fVariable, TClass::GetClass( typeid( Type ) ),
                                TDataType::GetType( typeid( Type ) ), kFALSE ) ) {
	   fParent->Error( ::TString( GetName() ) + "()", "Failed connecting to D3PD" );
	   return fVariable;
         }
      }
      UpdateBranch();

      return fVariable;
   }

   template< typename Type >
   typename VarHandle< Type >::const_result_type VarHandle< Type >::operator()() const {

      if( ! fFromInput ) return fVariable;

      if( ! fInBranch ) {
         if( ! ConnectVariable( &fVariable, TClass::GetClass( typeid( Type ) ),
                                TDataType::GetType( typeid( Type ) ), kFALSE ) ) {
            fParent->Error( ::TString( GetName() ) + "()", "Failed connecting to D3PD" );
            return fVariable;
         }
      }
      UpdateBranch();

      return fVariable;
   }

   template< typename Type >
   void VarHandle< Type >::ReadCurrentEntry() const {

      this->operator()();
      return;
   }

   template< typename Type >
   void VarHandle< Type >::Clear() {

      this->operator()() = 0;
      return;
   }

   template< typename Type >
   VarHandle< Type* >::VarHandle( ::TObject* parent, const char* name,
                                  const ::Long64_t* master )
      : VarHandleBase( parent, name, master ),
        fVariable( 0 ) {

      int status;
      char* type_name = abi::__cxa_demangle( typeid( Type ).name(), 0, 0, &status );
      if( ! status ) {
         SetType( type_name );
         ::free( type_name );
      }
   }

   template< typename Type >
   VarHandle< Type* >::~VarHandle() {

      if( fVariable ) delete fVariable;
   }

   template< typename Type >
   void VarHandle< Type* >::ReadFrom( ::TTree* tree ) {

      fInTree = tree;
      fFromInput = kTRUE;
      fInBranch = 0;
      fAvailable = UNKNOWN;

      return;
   }

   template< typename Type >
   ::TBranch* VarHandle< Type* >::WriteTo( ::TTree* tree ) {

      if( ! IsActive() ) return 0;

      ::TBranch* branch = tree->GetBranch( GetName() );
      if( branch ) return branch;

      if( ! ::strcmp( GetType(), "" ) ) {
         fParent->Error( "WriteTo",
                         "Couldn't demangle type name: %s",
                         typeid( Type ).name() );
         return 0;
      }
      if( ! fVariable ) {
         fVariable = new Type();
      }
      branch = tree->Bronch( GetName(), GetType(), &fVariable );
      if( ! branch ) {
         fParent->Error( "WriteTo",
                         "Couldn't add variable %s to tree %s",
                         GetName(), tree->GetName() );
      }
      return branch;
   }

   template< typename Type >
   typename VarHandle< Type* >::result_type
   VarHandle< Type* >::operator()() {

      if( ! fFromInput ) {
         if( ! fVariable ) fVariable = new Type();
         return fVariable;
      }

      if( ! fInBranch ) {
         if( ! ConnectVariable( &fVariable, TClass::GetClass( typeid( Type ) ),
                                TDataType::GetType( typeid( Type ) ), kTRUE ) ) {
            fParent->Error( ::TString( GetName() ) + "()",
                            "Failed connecting to D3PD" );
            return fVariable;
         }
      }
      UpdateBranch();

      return fVariable;
   }

   template< typename Type >
   typename VarHandle< Type* >::const_result_type
   VarHandle< Type* >::operator()() const {

      if( ! fFromInput ) {
         if( ! fVariable ) fVariable = new Type();
         return fVariable;
      }

      if( ! fInBranch ) {
         if( ! ConnectVariable( &fVariable, TClass::GetClass( typeid( Type ) ),
                                TDataType::GetType( typeid( Type ) ), kTRUE ) ) {
            fParent->Error( ::TString( GetName() ) + "()",
                            "Failed connecting to D3PD" );
            return fVariable;
         }
      }
      UpdateBranch();

      return fVariable;
   }

   template< typename Type >
   void VarHandle< Type* >::ReadCurrentEntry() const {

      this->operator()();
      return;
   }

   template< typename Type >
   void VarHandle< Type* >::Clear() {

      this->operator()()->clear();
      return;
   }

} // namespace D3PDReader

#endif // D3PDREADER_VARHANDLE_ICC
