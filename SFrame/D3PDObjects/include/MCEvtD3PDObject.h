// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_MCEvtD3PDObject_H
#define D3PDREADER_MCEvtD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "VarHandle.h"

class TTree;

namespace D3PDReader {

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-01
    *  OS   = Linux / 2.6.18-274.7.1.el5
    *  user = olivito
    *  time = Wed Nov 16 16:48:36 2011
    */
   class MCEvtD3PDObject : public TObject {

   public:
      /// Constructor used when reading from a TTree
      MCEvtD3PDObject( const ::Long64_t& master, const char* prefix = "" );
      /// Constructor when the object is only used for writing data out
      MCEvtD3PDObject( const char* prefix = "" );

      /// Get the currently configured prefix value
      const char* GetPrefix() const;
      /// Set the prefix for the variables
      void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      void SetActive( ::Bool_t active = kTRUE,
                      const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      void ReadAllActive();

      /// MC generator channel number; was used as run number for generator events
      VarHandle< UInt_t > mc_channel_number;
      /// MC generator event number
      VarHandle< UInt_t > mc_event_number;
      /// MC weight, coming from the EventType object
      VarHandle< Double_t > mc_event_weight;
      /// Number of ntuple rows.
      VarHandle< Int_t > mcevt_n;
      VarHandle< vector<int>* > mcevt_signal_process_id;
      VarHandle< vector<int>* > mcevt_event_number;
      VarHandle< vector<double>* > mcevt_event_scale;
      VarHandle< vector<double>* > mcevt_alphaQCD;
      VarHandle< vector<double>* > mcevt_alphaQED;
      VarHandle< vector<int>* > mcevt_pdf_id1;
      VarHandle< vector<int>* > mcevt_pdf_id2;
      VarHandle< vector<double>* > mcevt_pdf_x1;
      VarHandle< vector<double>* > mcevt_pdf_x2;
      VarHandle< vector<double>* > mcevt_pdf_scale;
      VarHandle< vector<double>* > mcevt_pdf1;
      VarHandle< vector<double>* > mcevt_pdf2;
      VarHandle< vector<vector<double> >* > mcevt_weight;
      /// Number of particles in the event
      VarHandle< vector<int>* > mcevt_nparticle;
      /// 0 = signal MC Event; 1 = in-time pileup MC Event; 2 = out-of-time pileup MC Event in [-2BC, +2BC]; 3 = the out-of-time pileup MC Event in [-800ns, -2BC] and [+2BC, +800ns]; 4 = cavern background MC Event; 5 = dummy event used to separate types; -1 = not filled
      VarHandle< vector<short>* > mcevt_pileUpType;

   private:
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      const ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( MCEvtD3PDObject, 0 )

   }; // class MCEvtD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_MCEvtD3PDObject_H
