// Dear emacs, this is -*- c++ -*-
// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_MuonD3PDObject_H
#define D3PDREADER_MuonD3PDObject_H

#include <map>
#include <vector>
using std::vector;

#include <TObject.h>
#include <TString.h>

#include "D3PDObjectBase.h"
#include "D3PDReadStats.h"
#include "VarHandle.h"
#include "VarProxy.h"

class TTree;

namespace D3PDReader {

   // Forward declaration(s):
   class MuonD3PDObject;

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-01
    *  OS   = Linux / 2.6.18-308.8.2.el5
    *  user = stahlman
    *  time = Fri Jun 29 14:28:44 2012
    */
   class MuonD3PDObjectElement : public TObject {

      friend class MuonD3PDObject;

   protected:
      /// Constructor only visible to MuonD3PDObject
      MuonD3PDObjectElement( size_t index, const MuonD3PDObject& parent );

   public:
      /// Copy constructor
      MuonD3PDObjectElement( const MuonD3PDObjectElement& parent );

      /// Parent object of this proxy object
      const MuonD3PDObject* GetParent() const;
      /// Index of the object inside its container
      size_t GetIndex() const;

      VarProxy< float > E;
      /// Index in trig_EF_trigmuonef_
      VarProxy< int > EFCB_index;
      /// Index in trig_EF_trigmuonef_
      VarProxy< int > EFME_index;
      /// Index in trig_EF_trigmugirl_
      VarProxy< int > EFMG_index;
      VarProxy< std::vector<int,std::allocator<int> > > SpaceTime_detID;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_t;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_tError;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_weight;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_x;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_y;
      VarProxy< std::vector<float,std::allocator<float> > > SpaceTime_z;
      VarProxy< unsigned short > allauthor;
      /// Is this muon also reconstructed by a CaloMuon ID algorithm?
      VarProxy< int > alsoFoundByCaloMuonId;
      /// Is this muon also reconstructed by the lowPt algorithm?
      VarProxy< int > alsoFoundByLowPt;
      VarProxy< int > author;
      VarProxy< int > barrelSectors;
      /// Is this combined track the best match to a MS track?
      VarProxy< int > bestMatch;
      VarProxy< float > beta;
      VarProxy< double > caloLRLikelihood;
      VarProxy< unsigned short > caloMuonIdTag;
      VarProxy< float > cb_d0_exPV;
      VarProxy< float > cb_phi_exPV;
      VarProxy< float > cb_qoverp_exPV;
      VarProxy< float > cb_theta_exPV;
      VarProxy< float > cb_z0_exPV;
      VarProxy< float > charge;
      VarProxy< float > cov_d0_exPV;
      VarProxy< float > cov_d0_phi_exPV;
      VarProxy< float > cov_d0_qoverp_exPV;
      VarProxy< float > cov_d0_theta_exPV;
      VarProxy< float > cov_d0_z0_exPV;
      VarProxy< float > cov_phi_exPV;
      VarProxy< float > cov_phi_qoverp_exPV;
      VarProxy< float > cov_phi_theta_exPV;
      VarProxy< float > cov_qoverp_exPV;
      VarProxy< float > cov_theta_exPV;
      VarProxy< float > cov_theta_qoverp_exPV;
      VarProxy< float > cov_z0_exPV;
      VarProxy< float > cov_z0_phi_exPV;
      VarProxy< float > cov_z0_qoverp_exPV;
      VarProxy< float > cov_z0_theta_exPV;
      VarProxy< float > d0_exPV;
      VarProxy< int > endcapSectors;
      VarProxy< float > energyLossErr;
      VarProxy< float > energyLossPar;
      VarProxy< float > energyLossType;
      VarProxy< float > etCore;
      VarProxy< float > eta;
      VarProxy< float > etcone20;
      VarProxy< float > etcone30;
      VarProxy< float > etcone40;
      VarProxy< int > expectBLayerHit;
      VarProxy< int > hastrack;
      VarProxy< float > id_cov_d0_exPV;
      VarProxy< float > id_cov_d0_phi_exPV;
      VarProxy< float > id_cov_d0_qoverp_exPV;
      VarProxy< float > id_cov_d0_theta_exPV;
      VarProxy< float > id_cov_d0_z0_exPV;
      VarProxy< float > id_cov_phi_exPV;
      VarProxy< float > id_cov_phi_qoverp_exPV;
      VarProxy< float > id_cov_phi_theta_exPV;
      VarProxy< float > id_cov_qoverp_exPV;
      VarProxy< float > id_cov_theta_exPV;
      VarProxy< float > id_cov_theta_qoverp_exPV;
      VarProxy< float > id_cov_z0_exPV;
      VarProxy< float > id_cov_z0_phi_exPV;
      VarProxy< float > id_cov_z0_qoverp_exPV;
      VarProxy< float > id_cov_z0_theta_exPV;
      VarProxy< float > id_d0;
      VarProxy< float > id_d0_exPV;
      VarProxy< float > id_phi;
      VarProxy< float > id_phi_exPV;
      VarProxy< float > id_qoverp;
      VarProxy< float > id_qoverp_exPV;
      VarProxy< float > id_theta;
      VarProxy< float > id_theta_exPV;
      VarProxy< float > id_z0;
      VarProxy< float > id_z0_exPV;
      VarProxy< float > ie_d0;
      VarProxy< float > ie_d0_exPV;
      VarProxy< float > ie_phi;
      VarProxy< float > ie_phi_exPV;
      VarProxy< float > ie_qoverp;
      VarProxy< float > ie_qoverp_exPV;
      VarProxy< float > ie_theta;
      VarProxy< float > ie_theta_exPV;
      VarProxy< float > ie_z0;
      VarProxy< float > ie_z0_exPV;
      /// Muon identified solely from calorimeter information (so no signal in MS).
      VarProxy< int > isCaloMuonId;
      /// Muon identified by combining an ID and a MS track.
      VarProxy< int > isCombinedMuon;
      /// Low-pt reconstructed muon (deprecated).
      VarProxy< int > isLowPtReconstructedMuon;
      VarProxy< float > isMuonLikelihood;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarProxy< int > isSegmentTaggedMuon;
      /// Is this muon also with a clean forward standalone muon associated to a ID tracklet
      VarProxy< int > isSiliconAssociatedForwardMuon;
      /// Muon identified by a spectrometer track (not associated to ID).
      VarProxy< int > isStandAloneMuon;
      /// Passes loose quality cuts.
      VarProxy< int > loose;
      VarProxy< float > m;
      VarProxy< float > matchchi2;
      VarProxy< int > matchndof;
      VarProxy< float > me_cov_d0_exPV;
      VarProxy< float > me_cov_d0_phi_exPV;
      VarProxy< float > me_cov_d0_qoverp_exPV;
      VarProxy< float > me_cov_d0_theta_exPV;
      VarProxy< float > me_cov_d0_z0_exPV;
      VarProxy< float > me_cov_phi_exPV;
      VarProxy< float > me_cov_phi_qoverp_exPV;
      VarProxy< float > me_cov_phi_theta_exPV;
      VarProxy< float > me_cov_qoverp_exPV;
      VarProxy< float > me_cov_theta_exPV;
      VarProxy< float > me_cov_theta_qoverp_exPV;
      VarProxy< float > me_cov_z0_exPV;
      VarProxy< float > me_cov_z0_phi_exPV;
      VarProxy< float > me_cov_z0_qoverp_exPV;
      VarProxy< float > me_cov_z0_theta_exPV;
      VarProxy< float > me_d0;
      VarProxy< float > me_d0_exPV;
      VarProxy< float > me_phi;
      VarProxy< float > me_phi_exPV;
      VarProxy< float > me_qoverp;
      VarProxy< float > me_qoverp_exPV;
      VarProxy< float > me_theta;
      VarProxy< float > me_theta_exPV;
      VarProxy< float > me_z0;
      VarProxy< float > me_z0_exPV;
      /// Passes medium quality cuts.
      VarProxy< int > medium;
      VarProxy< float > momentumBalanceSignificance;
      VarProxy< float > ms_d0;
      VarProxy< float > ms_phi;
      VarProxy< float > ms_qoverp;
      VarProxy< float > ms_theta;
      VarProxy< float > ms_z0;
      VarProxy< int > nBLHits;
      VarProxy< int > nBLSharedHits;
      VarProxy< int > nCSCEtaHits;
      VarProxy< int > nCSCEtaHoles;
      VarProxy< int > nCSCPhiHits;
      VarProxy< int > nCSCPhiHoles;
      VarProxy< int > nCSCUnspoiledEtaHits;
      VarProxy< int > nGangedPixels;
      VarProxy< int > nMDTBEEHits;
      VarProxy< int > nMDTBIHits;
      VarProxy< int > nMDTBIS78Hits;
      VarProxy< int > nMDTBMHits;
      VarProxy< int > nMDTBOHits;
      VarProxy< int > nMDTEEHits;
      VarProxy< int > nMDTEIHits;
      VarProxy< int > nMDTEMHits;
      VarProxy< int > nMDTEOHits;
      VarProxy< int > nMDTHits;
      VarProxy< int > nMDTHoles;
      VarProxy< int > nOutliersOnTrack;
      VarProxy< int > nPixHits;
      VarProxy< int > nPixHoles;
      VarProxy< int > nPixSharedHits;
      VarProxy< int > nPixelDeadSensors;
      VarProxy< int > nRPCEtaHits;
      VarProxy< int > nRPCEtaHoles;
      VarProxy< int > nRPCLayer1EtaHits;
      VarProxy< int > nRPCLayer1PhiHits;
      VarProxy< int > nRPCLayer2EtaHits;
      VarProxy< int > nRPCLayer2PhiHits;
      VarProxy< int > nRPCLayer3EtaHits;
      VarProxy< int > nRPCLayer3PhiHits;
      VarProxy< int > nRPCPhiHits;
      VarProxy< int > nRPCPhiHoles;
      VarProxy< int > nSCTDeadSensors;
      VarProxy< int > nSCTHits;
      VarProxy< int > nSCTHoles;
      VarProxy< int > nSCTSharedHits;
      VarProxy< int > nTGCEtaHits;
      VarProxy< int > nTGCEtaHoles;
      VarProxy< int > nTGCLayer1EtaHits;
      VarProxy< int > nTGCLayer1PhiHits;
      VarProxy< int > nTGCLayer2EtaHits;
      VarProxy< int > nTGCLayer2PhiHits;
      VarProxy< int > nTGCLayer3EtaHits;
      VarProxy< int > nTGCLayer3PhiHits;
      VarProxy< int > nTGCLayer4EtaHits;
      VarProxy< int > nTGCLayer4PhiHits;
      VarProxy< int > nTGCPhiHits;
      VarProxy< int > nTGCPhiHoles;
      VarProxy< int > nTRTDeadStraws;
      VarProxy< int > nTRTHighTHits;
      VarProxy< int > nTRTHighTOutliers;
      VarProxy< int > nTRTHits;
      VarProxy< int > nTRTOutliers;
      VarProxy< int > nphiHoleLayers;
      VarProxy< int > nphiLayers;
      VarProxy< int > nprecisionHoleLayers;
      VarProxy< int > nprecisionLayers;
      VarProxy< int > ntrigEtaHoleLayers;
      VarProxy< int > ntrigEtaLayers;
      VarProxy< float > nucone20;
      VarProxy< float > nucone30;
      VarProxy< float > nucone40;
      /// MC particle origin, from classifier tool
      VarProxy< int > origin;
      VarProxy< float > phi;
      VarProxy< float > phi_exPV;
      VarProxy< float > pt;
      VarProxy< float > ptcone20;
      VarProxy< float > ptcone30;
      VarProxy< float > ptcone40;
      VarProxy< float > px;
      VarProxy< float > py;
      VarProxy< float > pz;
      VarProxy< float > qoverp_exPV;
      VarProxy< float > scatteringCurvatureSignificance;
      VarProxy< float > scatteringNeighbourSignificance;
      VarProxy< float > theta_exPV;
      /// Passes tight quality cuts.
      VarProxy< int > tight;
      VarProxy< float > trackIPEstimate_d0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_d0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigd0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigd0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigz0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_sigz0_unbiasedpvunbiased;
      VarProxy< float > trackIPEstimate_z0_biasedpvunbiased;
      VarProxy< float > trackIPEstimate_z0_unbiasedpvunbiased;
      VarProxy< float > trackcov_d0;
      VarProxy< float > trackcov_d0_phi;
      VarProxy< float > trackcov_d0_qoverp;
      VarProxy< float > trackcov_d0_theta;
      VarProxy< float > trackcov_d0_z0;
      VarProxy< float > trackcov_phi;
      VarProxy< float > trackcov_phi_qoverp;
      VarProxy< float > trackcov_phi_theta;
      VarProxy< float > trackcov_qoverp;
      VarProxy< float > trackcov_theta;
      VarProxy< float > trackcov_theta_qoverp;
      VarProxy< float > trackcov_z0;
      VarProxy< float > trackcov_z0_phi;
      VarProxy< float > trackcov_z0_qoverp;
      VarProxy< float > trackcov_z0_theta;
      VarProxy< float > trackd0;
      VarProxy< float > trackd0beam;
      VarProxy< float > trackd0pv;
      VarProxy< float > trackd0pvunbiased;
      VarProxy< float > trackfitchi2;
      VarProxy< int > trackfitndof;
      VarProxy< float > trackphi;
      VarProxy< float > trackqoverp;
      /// Uncertainty on transverse impact parameter.
      VarProxy< float > tracksigd0beam;
      /// Uncertainty on transverse impact parameter.
      VarProxy< float > tracksigd0pv;
      VarProxy< float > tracksigd0pvunbiased;
      /// Uncertainty on longitudinal impact parameter.
      VarProxy< float > tracksigz0beam;
      /// Uncertainty on longitudinal impact parameter.
      VarProxy< float > tracksigz0pv;
      VarProxy< float > tracksigz0pvunbiased;
      VarProxy< float > tracktheta;
      VarProxy< float > trackz0;
      VarProxy< float > trackz0beam;
      VarProxy< float > trackz0pv;
      VarProxy< float > trackz0pvunbiased;
      VarProxy< float > truth_E;
      VarProxy< int > truth_barcode;
      VarProxy< float > truth_dr;
      VarProxy< float > truth_eta;
      VarProxy< int > truth_matched;
      VarProxy< int > truth_motherbarcode;
      VarProxy< int > truth_mothertype;
      VarProxy< float > truth_phi;
      VarProxy< float > truth_pt;
      VarProxy< int > truth_status;
      VarProxy< int > truth_type;
      /// MC particle type, from classifier tool
      VarProxy< int > type;
      VarProxy< float > z0_exPV;

   private:
      /// Reference to the parent of this object
      const MuonD3PDObject* fParent;
      /// The index of this object inside the parent container
      size_t fIndex;

      ClassDef( MuonD3PDObjectElement, 0 )

   }; // class MuonD3PDObjectElement

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = pc-penn-d-01
    *  OS   = Linux / 2.6.18-308.8.2.el5
    *  user = stahlman
    *  time = Fri Jun 29 14:28:44 2012
    */
   class MuonD3PDObject : public D3PDObjectBase {

   public:
      /// Constructor used when reading from a TTree
      MuonD3PDObject( const ::Long64_t& master, const char* prefix = "mu_staco_" );
      /// Constructor when the object is only used for writing data out
      MuonD3PDObject( const char* prefix = "mu_staco_" );
      /// Destructor
      ~MuonD3PDObject();

      /// Get the currently configured prefix value
      virtual const char* GetPrefix() const;
      /// Set the prefix for the variables
      virtual void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      virtual void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      virtual void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      virtual void SetActive( ::Bool_t active = kTRUE,
                              const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      virtual void ReadAllActive();

      /// Get the D3PD reading statistics
      virtual D3PDReadStats GetStatistics() const;

      /// Set the contents of the object according to another object
      MuonD3PDObject& Set( const MuonD3PDObject& parent );

      /// Clear the container. Useful when writing new branches.
      void Clear( Option_t* option = "" );
      /// Add one element to an output collection
      MuonD3PDObject& Add( const MuonD3PDObjectElement& el );

      /// Access a proxy class describing one element of the container
      MuonD3PDObjectElement& operator[]( size_t index );
      /// Access a proxy class describing one element of the container (constant version)
      const MuonD3PDObjectElement& operator[]( size_t index ) const;
      /// Add one element to an output collection
      MuonD3PDObject& operator+=( const MuonD3PDObjectElement& el );

      VarHandle< std::vector<float,std::allocator<float> >* > E;
      /// Index in trig_EF_trigmuonef_
      VarHandle< std::vector<int,std::allocator<int> >* > EFCB_index;
      /// Index in trig_EF_trigmuonef_
      VarHandle< std::vector<int,std::allocator<int> >* > EFME_index;
      /// Index in trig_EF_trigmugirl_
      VarHandle< std::vector<int,std::allocator<int> >* > EFMG_index;
      VarHandle< std::vector<std::vector<int,std::allocator<int> >,std::allocator<std::vector<int,std::allocator<int> > > >* > SpaceTime_detID;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_t;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_tError;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_weight;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_x;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_y;
      VarHandle< std::vector<std::vector<float,std::allocator<float> >,std::allocator<std::vector<float,std::allocator<float> > > >* > SpaceTime_z;
      VarHandle< std::vector<unsigned short,std::allocator<unsigned short> >* > allauthor;
      /// Is this muon also reconstructed by a CaloMuon ID algorithm?
      VarHandle< std::vector<int,std::allocator<int> >* > alsoFoundByCaloMuonId;
      /// Is this muon also reconstructed by the lowPt algorithm?
      VarHandle< std::vector<int,std::allocator<int> >* > alsoFoundByLowPt;
      VarHandle< std::vector<int,std::allocator<int> >* > author;
      VarHandle< std::vector<int,std::allocator<int> >* > barrelSectors;
      /// Is this combined track the best match to a MS track?
      VarHandle< std::vector<int,std::allocator<int> >* > bestMatch;
      VarHandle< std::vector<float,std::allocator<float> >* > beta;
      VarHandle< std::vector<double,std::allocator<double> >* > caloLRLikelihood;
      VarHandle< std::vector<unsigned short,std::allocator<unsigned short> >* > caloMuonIdTag;
      VarHandle< std::vector<float,std::allocator<float> >* > cb_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cb_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cb_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cb_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cb_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > charge;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_d0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_d0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_d0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_d0_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_phi_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_phi_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_theta_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_z0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_z0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > cov_z0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > d0_exPV;
      VarHandle< std::vector<int,std::allocator<int> >* > endcapSectors;
      VarHandle< std::vector<float,std::allocator<float> >* > energyLossErr;
      VarHandle< std::vector<float,std::allocator<float> >* > energyLossPar;
      VarHandle< std::vector<float,std::allocator<float> >* > energyLossType;
      VarHandle< std::vector<float,std::allocator<float> >* > etCore;
      VarHandle< std::vector<float,std::allocator<float> >* > eta;
      VarHandle< std::vector<float,std::allocator<float> >* > etcone20;
      VarHandle< std::vector<float,std::allocator<float> >* > etcone30;
      VarHandle< std::vector<float,std::allocator<float> >* > etcone40;
      VarHandle< std::vector<int,std::allocator<int> >* > expectBLayerHit;
      VarHandle< std::vector<int,std::allocator<int> >* > hastrack;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_d0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_d0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_d0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_d0_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_phi_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_phi_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_theta_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_z0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_z0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_cov_z0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_d0;
      VarHandle< std::vector<float,std::allocator<float> >* > id_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > id_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > id_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > id_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > id_z0;
      VarHandle< std::vector<float,std::allocator<float> >* > id_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_d0;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_z0;
      VarHandle< std::vector<float,std::allocator<float> >* > ie_z0_exPV;
      /// Muon identified solely from calorimeter information (so no signal in MS).
      VarHandle< std::vector<int,std::allocator<int> >* > isCaloMuonId;
      /// Muon identified by combining an ID and a MS track.
      VarHandle< std::vector<int,std::allocator<int> >* > isCombinedMuon;
      /// Low-pt reconstructed muon (deprecated).
      VarHandle< std::vector<int,std::allocator<int> >* > isLowPtReconstructedMuon;
      VarHandle< std::vector<float,std::allocator<float> >* > isMuonLikelihood;
      /// Muon identified by inner-detector seeded identification (segment tagging or ID+MS refit).
      VarHandle< std::vector<int,std::allocator<int> >* > isSegmentTaggedMuon;
      /// Is this muon also with a clean forward standalone muon associated to a ID tracklet
      VarHandle< std::vector<int,std::allocator<int> >* > isSiliconAssociatedForwardMuon;
      /// Muon identified by a spectrometer track (not associated to ID).
      VarHandle< std::vector<int,std::allocator<int> >* > isStandAloneMuon;
      /// Passes loose quality cuts.
      VarHandle< std::vector<int,std::allocator<int> >* > loose;
      VarHandle< std::vector<float,std::allocator<float> >* > m;
      VarHandle< std::vector<float,std::allocator<float> >* > matchchi2;
      VarHandle< std::vector<int,std::allocator<int> >* > matchndof;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_d0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_d0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_d0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_d0_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_phi_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_phi_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_theta_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_z0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_z0_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_z0_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_cov_z0_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_d0;
      VarHandle< std::vector<float,std::allocator<float> >* > me_d0_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > me_phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > me_qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > me_theta_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > me_z0;
      VarHandle< std::vector<float,std::allocator<float> >* > me_z0_exPV;
      /// Passes medium quality cuts.
      VarHandle< std::vector<int,std::allocator<int> >* > medium;
      VarHandle< std::vector<float,std::allocator<float> >* > momentumBalanceSignificance;
      VarHandle< std::vector<float,std::allocator<float> >* > ms_d0;
      VarHandle< std::vector<float,std::allocator<float> >* > ms_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > ms_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > ms_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > ms_z0;
      /// Number of ntuple rows.
      VarHandle< int > n;
      VarHandle< std::vector<int,std::allocator<int> >* > nBLHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nBLSharedHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nCSCEtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nCSCEtaHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nCSCPhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nCSCPhiHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nCSCUnspoiledEtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nGangedPixels;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTBEEHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTBIHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTBIS78Hits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTBMHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTBOHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTEEHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTEIHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTEMHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTEOHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nMDTHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nOutliersOnTrack;
      VarHandle< std::vector<int,std::allocator<int> >* > nPixHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nPixHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nPixSharedHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nPixelDeadSensors;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCEtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCEtaHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer1EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer1PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer2EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer2PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer3EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCLayer3PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCPhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nRPCPhiHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nSCTDeadSensors;
      VarHandle< std::vector<int,std::allocator<int> >* > nSCTHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nSCTHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nSCTSharedHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCEtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCEtaHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer1EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer1PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer2EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer2PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer3EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer3PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer4EtaHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCLayer4PhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCPhiHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTGCPhiHoles;
      VarHandle< std::vector<int,std::allocator<int> >* > nTRTDeadStraws;
      VarHandle< std::vector<int,std::allocator<int> >* > nTRTHighTHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTRTHighTOutliers;
      VarHandle< std::vector<int,std::allocator<int> >* > nTRTHits;
      VarHandle< std::vector<int,std::allocator<int> >* > nTRTOutliers;
      VarHandle< std::vector<int,std::allocator<int> >* > nphiHoleLayers;
      VarHandle< std::vector<int,std::allocator<int> >* > nphiLayers;
      VarHandle< std::vector<int,std::allocator<int> >* > nprecisionHoleLayers;
      VarHandle< std::vector<int,std::allocator<int> >* > nprecisionLayers;
      VarHandle< std::vector<int,std::allocator<int> >* > ntrigEtaHoleLayers;
      VarHandle< std::vector<int,std::allocator<int> >* > ntrigEtaLayers;
      VarHandle< std::vector<float,std::allocator<float> >* > nucone20;
      VarHandle< std::vector<float,std::allocator<float> >* > nucone30;
      VarHandle< std::vector<float,std::allocator<float> >* > nucone40;
      /// MC particle origin, from classifier tool
      VarHandle< std::vector<int,std::allocator<int> >* > origin;
      VarHandle< std::vector<float,std::allocator<float> >* > phi;
      VarHandle< std::vector<float,std::allocator<float> >* > phi_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > pt;
      VarHandle< std::vector<float,std::allocator<float> >* > ptcone20;
      VarHandle< std::vector<float,std::allocator<float> >* > ptcone30;
      VarHandle< std::vector<float,std::allocator<float> >* > ptcone40;
      VarHandle< std::vector<float,std::allocator<float> >* > px;
      VarHandle< std::vector<float,std::allocator<float> >* > py;
      VarHandle< std::vector<float,std::allocator<float> >* > pz;
      VarHandle< std::vector<float,std::allocator<float> >* > qoverp_exPV;
      VarHandle< std::vector<float,std::allocator<float> >* > scatteringCurvatureSignificance;
      VarHandle< std::vector<float,std::allocator<float> >* > scatteringNeighbourSignificance;
      VarHandle< std::vector<float,std::allocator<float> >* > theta_exPV;
      /// Passes tight quality cuts.
      VarHandle< std::vector<int,std::allocator<int> >* > tight;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_d0_biasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_d0_unbiasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_sigd0_biasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_sigd0_unbiasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_sigz0_biasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_sigz0_unbiasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_z0_biasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackIPEstimate_z0_unbiasedpvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_d0;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_d0_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_d0_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_d0_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_d0_z0;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_phi_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_phi_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_theta_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_z0;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_z0_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_z0_qoverp;
      VarHandle< std::vector<float,std::allocator<float> >* > trackcov_z0_theta;
      VarHandle< std::vector<float,std::allocator<float> >* > trackd0;
      VarHandle< std::vector<float,std::allocator<float> >* > trackd0beam;
      VarHandle< std::vector<float,std::allocator<float> >* > trackd0pv;
      VarHandle< std::vector<float,std::allocator<float> >* > trackd0pvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > trackfitchi2;
      VarHandle< std::vector<int,std::allocator<int> >* > trackfitndof;
      VarHandle< std::vector<float,std::allocator<float> >* > trackphi;
      VarHandle< std::vector<float,std::allocator<float> >* > trackqoverp;
      /// Uncertainty on transverse impact parameter.
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigd0beam;
      /// Uncertainty on transverse impact parameter.
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigd0pv;
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigd0pvunbiased;
      /// Uncertainty on longitudinal impact parameter.
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigz0beam;
      /// Uncertainty on longitudinal impact parameter.
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigz0pv;
      VarHandle< std::vector<float,std::allocator<float> >* > tracksigz0pvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > tracktheta;
      VarHandle< std::vector<float,std::allocator<float> >* > trackz0;
      VarHandle< std::vector<float,std::allocator<float> >* > trackz0beam;
      VarHandle< std::vector<float,std::allocator<float> >* > trackz0pv;
      VarHandle< std::vector<float,std::allocator<float> >* > trackz0pvunbiased;
      VarHandle< std::vector<float,std::allocator<float> >* > truth_E;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_barcode;
      VarHandle< std::vector<float,std::allocator<float> >* > truth_dr;
      VarHandle< std::vector<float,std::allocator<float> >* > truth_eta;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_matched;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_motherbarcode;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_mothertype;
      VarHandle< std::vector<float,std::allocator<float> >* > truth_phi;
      VarHandle< std::vector<float,std::allocator<float> >* > truth_pt;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_status;
      VarHandle< std::vector<int,std::allocator<int> >* > truth_type;
      /// MC particle type, from classifier tool
      VarHandle< std::vector<int,std::allocator<int> >* > type;
      VarHandle< std::vector<float,std::allocator<float> >* > z0_exPV;

   private:
      mutable std::vector< MuonD3PDObjectElement* > fProxies; ///< Internal list of proxy objects
      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( MuonD3PDObject, 0 )

   }; // class MuonD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_MuonD3PDObject_H
