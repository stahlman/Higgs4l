import os
#from dataSets import data12_electrons_hsg2_test as datasets
#from dataSets import data12_electrons_hsg2 as datasets
#from dataSets import data12_electrons_hsg2_2l as datasets
#from dataSets import data12_electrons_hsg2_4l as datasets
#from dataSets import data12_muons_hsg2 as datasets
#from dataSets import data12_muons_hsg2_2l as datasets
#from dataSets import data12_muons_hsg2_4l as datasets
#from dataSets import mc12_hsg2 as datasets
#from dataSets import mc12_egamma as datasets
#from dataSets import mc12_higgs as datasets
#from dataSets import mc12_hsg2_background as datasets
#from dataSets import data12_hsg2_4l as datasets

from dataSets import test as datasets

preFix = "user.stahlman."
postFix = ".v6.skim/"

outputfilename = "skim_2l.root"
#filetype="data"
filetype="mc"
treename="physics"
#treename="egamma"
runscript="python skim2l.py $1 \"" + filetype + "\" \"" + treename + "\" \"" + outputfilename + "\""


f = open('runSkims.sh', 'w')
print >>f, "#!/bin/bash"
#print >>f, ""
print >>f, "#This file is generated by submitSkims2Grid.py"
print >>f, "echo \"arguments were:\""
print >>f, "echo \"outputfilename: ", outputfilename, "\""
print >>f, "echo \"filetype: ", filetype, "\""
print >>f, "echo \"treename: ", treename, "\""
print >>f, runscript

f.close()

os.system("chmod +x runSkims.sh")

#exit(0)

f_doc = open('submitted_v2.txt', 'w')

for i in range(len(datasets)):
    
    print 'Submitting dataset: ' + str(i+1) + '/' + str(len(datasets))
    
    command = "prun "
    command += " --exec \"bash runSkims.sh %IN\""
    #command += " --nGBPerJob=MAX"

    command += " --nFilesPerJob=1"
    #command += " --nFiles=1"

    command += " --inDS "+datasets[i]
    dsName = datasets[i].rstrip("/")
    #max allowed dataset name size 
    dsNameLength = 131 - len(preFix+postFix)
    command += " --outDS "+preFix+dsName[:dsNameLength]+postFix

    command += " --athenaTag=17.7.0" #to set up ROOT    

    #command += " --excludedSite=ANALY_MPPMU,ANALY_ROMANIA07,ANALY_LAPP,ANALY_ARC,ANALY_LIV,ANALY_INFN-MILANO-ATLASC,ANALY_MANC,ANALY_IN2P3-CC,ANALY_RAL_XROOTD,ANALY_RAL"

    command += " --outputs "+outputfilename

    command += " --destSE=UPENN_LOCALGROUPDISK" ###sends output directly to tier3
    
    #command += " --mergeOutput"
    
    #command += " --nFiles=1"  #for testing

    cloud_command = " --cloud=US"
     
    #### submit to preferred cloud (US) first
    #print command+cloud_command
    #os.system(command+cloud_command)

    # check for missing files by submitting again
    print command
    os.system(command)
    #print >>f_doc, preFix+dsName[:110]+tag+postFix


